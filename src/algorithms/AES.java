package src.algorithms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import src.algorithms.utils.Utils;

public class AES {
	
	private int[][] state;
	
	private int[][] initializationVector;
	
	private int round;
	
	private static int[] originalKey;
	private static int[] expandedKey;
	
	private static final int KEY_SIZE = 128;
	private static final int N = 16;
	private static final int B = 176;
	
	enum OP_MODE{
		CBC,
		EBC
	};

//	https://en.wikipedia.org/wiki/Rijndael_S-box
	static final int[][] S_BOX = {
		{0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76},
		{0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0},
		{0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15},
		{0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75},
		{0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84},
		{0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf},
		{0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8},
		{0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2},
		{0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73},
		{0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb},
		{0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79},
		{0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08},
		{0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a},
		{0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e},
		{0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf},
		{0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16}
	};
	
	static final int[][] INV_S_BOX = {
		{0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb}, 
		{0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb}, 
		{0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e}, 
		{0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25}, 
		{0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92}, 
		{0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84}, 
		{0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06}, 
		{0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b}, 
		{0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73}, 
		{0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e}, 
		{0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b}, 
		{0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4}, 
		{0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f}, 
		{0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef}, 
		{0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61}, 
		{0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d}
	};
	
//	https://en.wikipedia.org/wiki/Rijndael_mix_columns
	
	public static final int[][] GALOIS_MATRIX = {
		{0x02, 0x03, 0x01, 0x01},
		{0x01, 0x02, 0x03, 0x01},
		{0x01, 0x01, 0x02, 0x03},
		{0x03, 0x01, 0x01, 0x02}
	};
	
	public static final int[][] INV_GALOIS_MATRIX = {
		{0x0e, 0x0b, 0x0d, 0x09},
		{0x09, 0x0e, 0x0b, 0x0d},
		{0x0d, 0x09, 0x0e, 0x0b},
		{0x0b, 0x0d, 0x09, 0x0e}
	};
	
	private static final int[] RCON_TABLE = {
		0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
		0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
		0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
		0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
		0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
		0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
		0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
		0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
		0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
		0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
		0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
		0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
		0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
		0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
		0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
		0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
	};
	
	public static void addRoundKey(int[][] block){
		
	}
	/*
	 * Recebe um bloco (16 "bytes") e so subtitui pelo valor do S_BOX
	 */
	public static void byteSub(int[][] block) throws Exception{
		if(block.length != 4 || block[0].length != 4){
			throw new Exception();
		}
		int temp;
		for(int i = 0; i < 4; i ++){
			for(int j = 0; j < 4; j ++){
				block[i][j] = S_BOX[block[i][j] / 0x10][block[i][j] % 0x10];
			}
		}
	}

	public static void shiftRows(int[][] matrix){
		for(int i = 0; i < matrix.length; i++){
			rotateLeft(matrix[i], i);
		}
	}
	
	public static int[][] mixColumn(int[][] block){
		try {
			return matrixMultiplication(GALOIS_MATRIX, block);
		} catch (Exception e) {
			System.out.println("Erro no mix column");
			e.printStackTrace();
		}
		return null;
	}
	
	public static void rotateLeft(int[] array, int shifts){
		int arrayLength = array.length;
		int temp;
		for(int i = 0; i < shifts; i++){
			temp = array[0];
			for(int j = 0; j < array.length - 1; j++){
				
				array[j % arrayLength] = array[(j + 1) % arrayLength];
			}
			array[arrayLength - 1] = temp;
		}
	}

	
	
	/*
	 * PRIVATE STUFF
	 */
	
	/*
	 * Funcoes para o key scheduling
	 */
	private static void rotWord(int[] word) throws Exception{
		if(word.length != 4){
			throw new Exception("RotWord - word tem 4 bytes!");
		}
		
		rotateLeft(word, 1);
	}
	
	private static void subWord(int[] word) throws Exception{
		if(word.length != 4){
			throw new Exception("RotWord - word tem 4 bytes!");
		}
		
		for(int i = 0; i < 4; i++){
			word[i] = S_BOX[word[i] / 0x10][word[i] % 0x10];
		}
	}
	
	private static int rcon(int round){
		return RCON_TABLE[round];
	}
	
	private static int[] ek(int[] expandedKey, int offset){
		return Arrays.copyOfRange(expandedKey, offset, offset + 4);
	}
	
	private static int[] k(int[] originalKey, int offset){
		return ek(originalKey, offset);
	}
	
//	https://en.wikipedia.org/wiki/Rijndael_key_schedule
	private static void keyScheduleCore(int[] roundKey, int round){
		
		try {
			rotWord(roundKey);
			subWord(roundKey);
			roundKey[0] ^= rcon(round);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	private static int[] keySchedule(int[] originalKey){
		List<Integer> expandedKey = new ArrayList<Integer>();
		int[] t;
		
		for(int i = 0; i < N; i++){
			expandedKey.add(originalKey[i]);
		}
		
		int roundIteration = 1;
		
		while(expandedKey.size() < B){
			t = Arrays.copyOfRange(Utils.toIntArray(expandedKey), expandedKey.size() - 4, expandedKey.size());
			keyScheduleCore(t, roundIteration);
			roundIteration++;
			for(int i = 0; i < t.length; i++){
				t[i] ^= expandedKey.get(expandedKey.size() - 16 + i);
			}
			for(int i = 0; i < t.length; i++){
				expandedKey.add(t[i]);
			}
			
			for(int i = 0; i < 3; i++){
				t = Arrays.copyOfRange(Utils.toIntArray(expandedKey), expandedKey.size() - 4, expandedKey.size());
				for(int j = 0; j < t.length; j++){
					t[j] ^= expandedKey.get(expandedKey.size() - 16 + j);
				}
				for(int j = 0; j < t.length; j++){
					expandedKey.add(t[j]);
				}
			}
		}
		
		return Utils.toIntArray(expandedKey);
	}
	
	/*
	 * Funçoes auxiliares ou intermediarias
	 */
	private static int[][] xorMatrixes(int[][] matrix1, int[][] matrix2){
		int matrixResult[][] = new int[matrix1.length][matrix1[0].length];
		for(int i = 0; i < matrix1.length; i++){
			for(int j = 0; j < matrix1[i].length; j++){
				matrixResult[i][j] = matrix1[i][j] ^ matrix2[i][j];
			}
		}
		return matrixResult;
	}
	
//	é a multiplicação de matrizes, mas com 
	private static int[][] matrixMultiplication(int[][] matrix1, int[][] matrix2) throws Exception{
		
		if(matrix2.length != 4 || matrix2[0].length != 4){
			throw new Exception();
		}
		
		int[][] transformedMatrix= new int[matrix2.length][matrix2[0].length];
		int k = 0;
		
		for(int i = 0; i < 4; i++){
			for(int j = 0; j < 4; j++){
				transformedMatrix[i][j] = lineXColumn(matrix1, matrix2, i, j);
			}
		}
		
		return transformedMatrix;
		
	}
	
	
	/*
	 * calcula um elemento na multiplicacao de matriz
	 * Considera que as matrizes sao compativeis
	 */
	
	private static int lineXColumn(int[][] matrix1, int[][] matrix2, int line, int column){
		int result = -1;
		
		for(int i = 0; i < matrix1.length; i++){
			
			if(result < 0 || result > 0xFF){
				result = matrix1[line][i] * matrix2[i][column];
			}else{
				result ^= matrix1[line][i] * matrix2[i][column];
			}
		}
		
//		aplica uma mascara, pois eh um int, nao dois bytes de verdade
		return result & 0xFF;
	}
	
	public static void main(String args[]){
		int[] originalKey = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
		int[] expandedKey = keySchedule(originalKey);
		System.out.println(expandedKey);
	}
}
